" ==================== Plugins ====================

call plug#begin("~/.config/nvim/plugged")

" Colors
Plug 'dracula/vim', {'as': 'dracula'}

Plug 'fatih/vim-hclfmt'
Plug 'fatih/vim-go'
Plug 'hashivim/vim-terraform'
Plug 'preservim/nerdtree'
Plug 'tmux-plugins/vim-tmux', {'for': 'tmux'}
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

call plug#end()

" disable compatibility with vi
set nocompatible
filetype off
filetype plugin indent on

set ttyfast

" file encoding
set encoding=utf-8
set termencoding=utf-8

" reload files changed on disk
set autoread
" write old file when switching between files
set autowrite
" no backup files
set nobackup
" no swap files
set noswapfile
" no undo files
set noundofile

" enable syntax highlighting
syntax on
" enable autoident
set autoindent
" allow backspace in insert mode
set backspace=indent,eol,start
" highlight current line
set cursorline
" enable line numbers
set number
" show the cursor position
set ruler
" show the command
set showcmd
" show the current mode
set showmode
" enable tabstop
set tabstop=2
" show the filename in the window titlebar
set title

" color
syntax enable
colorscheme dracula

:let mapleader = "-"

" ==================== vim-hclfmt ====================

let g:hcl_fmt_autosave = 0
let g:nomad_fmt_autosave = 0
let g:tf_fmt_autosave = 0

" ==================== vim-go ====================

" Formatting
let g:go_fmt_autosave = 1
let g:go_fmt_command = "gofmt"

let g:go_fold_enable = []

" Syntax highlighting
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 0
let g:go_highlight_fields = 1
let g:go_highlight_format_strings = 0
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 0
let g:go_highlight_functions = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_space_tab_error = 0
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_types = 0
let g:go_highlight_variable_assignments = 1
let g:go_highlight_variable_declarations = 1

" Importing
let g:go_imports_autosave = 1
let g:go_imports_mode = "goimports"

" Linting
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_enabled = ['vet', 'golint']

let g:go_modifytags_transform = 'camelcase'

" ==================== vim-terraform ====================

let g:terraform_align=1
let g:terraform_fmt_on_save=1
let g:terraform_fold_sections=1

" ==================== Fugitive ====================

nnoremap <leader>gs :Gstatus<CR>

" ==================== NERDTree ====================

" open a NERDTree automatically when vim starts up
autocmd vimenter * NERDTree
" open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

let NERDTreeShowHidden=1

" for toggling
noremap <Leader>n :NERDTreeToggle<cr>
noremap <Leader>f :NERDTreeFind<cr>

" ==================== Pandoc ====================

let g:pandoc#filetypes#pandoc_markdown = 1
let g:pandoc#modules#enabled = []
let g:pandoc#modules#disabled = []
let g:pandoc#syntax#codeblocks#embeds#langs = [
\	"awk",
\	"bash=sh",
\	"c",
\	"css",
\	"dot",
\	"go",
\	"html",
\	"java",
\	"javascript",
\	"json",
\	"latex=tex",
\	"lua",
\	"makefile=make",
\	"markdown",
\	"pascal",
\	"python",
\	"sed",
\	"sh",
\	"sql",
\	"sqlpostgresql=sql",
\	"xml",
\	"yaml"
\]
let g:pandoc#formatting#mode = "h"
